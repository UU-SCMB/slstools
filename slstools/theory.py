import numpy as np
import os


class Miescat:
    """Helper class for data generated by the miescat program.

    Attributes
    ----------
    data : numpy.ndarray
        Numpy array containing all raw data from the file.
    theta : numpy.ndarray
        Numpy array containing the scattering angles in degrees.
    K : numpy.ndarray
        Numpy array containing the scattering angles (in units of `K_unit`).
    K_unit : str
        (inverse) unit of K, one of [`nm`, `µm`, `m`].
    intensity : numpy.ndarray
        Numpy array containing (normalised) scattering intensities
         (perpendicular polarised)
    intensity_par : numpy.ndarray
        Numpy array containing (normalised) scattering intensities (parallel
        polarised)
    """

    def __init__(self, filename, K_unit="m", **kwargs):
        """Initialisation of the class, assigns the data to objects attributes

        Parameters
        ----------
        filename : str
            Path to the file that contains the miescat data.
        K_unit : str, optional
            (inverse) unit of K, one of [`nm`, `µm`, `m`], by default "m".
        """

        if not os.path.exists(filename):
            raise FileNotFoundError(f"The file {filename} does not exist")

        if K_unit not in ["m", "nm", "um", "µm"]:
            raise ValueError(
                f"The unit of K should be m, nm or µm. The given value '{K_unit}' is not allowed."
            )

        self.data = np.genfromtxt(filename, delimiter="\t", skip_header=1, **kwargs).T

        self.theta = self.data[0]

        self.K = self.data[1]
        self.K_unit = K_unit

        self.intensity = self.data[2]
        self.intensity_par = self.data[3]

        if self.K_unit == "nm":
            self.K /= 1e9
        elif self.K_unit == "um" or self.K_unit == "µm":
            self.K_unit = "µm"
            self.K /= 1e6
