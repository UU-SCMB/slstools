import numpy as np
import os


class Experiment:
    """Helper class for data generated by the SCM SLS setup.

    Attributes
    ----------
    data : numpy.ndarray
        Numpy array containing all raw data from the file.
    theta : numpy.ndarray
        Numpy array containing the scattering angles in degrees.
    intensity_uncor : numpy.ndarray
        Numpy array containing scattering intensities, not corrected for
        scattering volume (perpendicular polarisation).
    intensity : numpy.ndarray
        Numpy array containing scattering intensities, corrected for scattering
        volume (perpendicular polarisation).
    K : numpy.ndarray
        Numpy array containing the scattering angles (in units of `K_unit`).
    K_unit : str
        (inverse) unit of K, one of [`nm`, `µm`, `m`].
    temperature : numpy.ndarray
        Numpy array containing temperatures that were measured by the setup.
    """

    def __init__(self, filename, normalise=True, K_unit="m", **kwargs):
        """Initialisation of the class, assigns the data as class variables.

        Parameters
        ----------
        filename : str
            Path to file
        normalise : bool, optional
            Whether or not to normalise the intensity data to 1. The default is
            True.
        K_unit : str, optional
            Inverse units of K, one of [`nm`, `µm`, `m`]. E.g. if `nm` is given
            a `K_unit`, `K` will be given in units of. The default is `m`.
        """

        if not os.path.exists(filename):
            raise FileNotFoundError(f"The file {filename} does not exist")

        if K_unit not in ["m", "nm", "um", "µm"]:
            raise ValueError(
                f"The unit of K should be m, nm or µm. The given value '{K_unit}' is not allowed."
            )

        # cols=['theta', 'I', 'Icor', 'K', 'T'])
        self.data = np.genfromtxt(filename, delimiter=",", skip_header=3, **kwargs).T
        self.theta = self.data[0]
        # not corrected for scattering volume
        self.intensity_uncor = self.data[1]
        self.intensity = self.data[2]

        if normalise:
            self.intensity /= self.intensity.max()
            self.intensity_uncor /= self.intensity_uncor.max()

        self.K = self.data[3]
        self.K_unit = K_unit

        if self.K_unit == "nm":
            self.K /= 1e9
        elif self.K_unit == "um" or self.K_unit == "µm":
            self.K_unit = "µm"
            self.K /= 1e6

        self.temperature = self.data[4]
